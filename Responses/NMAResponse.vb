#Region "LICENSE"
' Copyright 2013 Steven Liekens
' Contact: steven.liekens@gmail.com
'
' Permission is hereby granted, free of charge, to any person obtaining
' a copy of this software and associated documentation files (the
' "Software"), to deal in the Software without restriction, including
' without limitation the rights to use, copy, modify, merge, publish,
' distribute, sublicense, and/or sell copies of the Software, and to
' permit persons to whom the Software is furnished to do so, subject to
' the following conditions:
'
' The above copyright notice and this permission notice shall be
' included in all copies or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
' EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
' MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
' NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
' LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
' OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
' WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#End Region
Namespace NotifyMyAndroid

    ''' <summary>
    ''' This is the base class for response messages generated by the NMA API.
    ''' </summary>
    Public MustInherit Class NMAResponse

        Private _source As XDocument
        Protected Sub New(response As XDocument)
            _source = response
        End Sub

        ''' <summary>
        ''' Indicates the status code associated with the request that generated this response.
        ''' </summary>
        Public ReadOnly Property StatusCode As StatusCode
            Get
                Return Me.GetAttribute(Of StatusCode)(Output.Code)
            End Get
        End Property

        ''' <summary>
        ''' Indicates the amount of minutes until the remaining amount of API calls resets.
        ''' </summary>
        Public ReadOnly Property TimeUntilReset As TimeSpan?
            Get
                If Me.StatusCode = NotifyMyAndroid.StatusCode.Success Or Me.StatusCode = NotifyMyAndroid.StatusCode.LimitReached Then
                    Return Me.GetAttribute(Of TimeSpan)(Output.ResetTimer)
                End If
            End Get
        End Property

        ''' <summary>
        ''' Gets whether the status code indicates success.
        ''' </summary>
        Public ReadOnly Property IsSuccessStatusCode As Boolean
            Get
                Return Me.StatusCode = NotifyMyAndroid.StatusCode.Success
            End Get
        End Property

        ''' <summary>
        ''' Throws a new <see cref="NMAException"/> if the status code indicates failure.
        ''' </summary>
        Public Sub EnsureSuccessStatusCode()
            If Not Me.IsSuccessStatusCode Then
                Throw New NMAException(Me.StatusCode, Me.GetElement().Value)
            End If
        End Sub

        ''' <summary>
        ''' Gets an instance of <see cref="NMASuccess"/> or <see cref="NMAError"/> for the specified response.
        ''' </summary>
        Public Shared Function GetResponse(response As XDocument) As NMAResponse
            If response Is Nothing Then
                Throw New ArgumentNullException("response")
            End If
            Dim result = TryCast(response.Root.FirstNode, XElement)
            If result Is Nothing Then
                Throw New ArgumentException("The specified response is invalid.", "response")
            End If
            Select Case True
                Case String.Equals(result.Name.LocalName, "success", StringComparison.OrdinalIgnoreCase)
                    Return New NMASuccess(response)
                Case String.Equals(result.Name.LocalName, "error", StringComparison.OrdinalIgnoreCase)
                    Return New NMAError(response)
                Case Else
                    Throw New ArgumentException("The specified response is invalid.", "response")
            End Select
        End Function

#Region "Implementation details"

        Protected ReadOnly Property Source As XDocument
            Get
                Return New XDocument(_source)
            End Get
        End Property

        Protected Function GetElement() As XElement
            Return DirectCast(Me.Source.Root.FirstNode, XElement)
        End Function

        Protected Function HasAttribute(name As String) As Boolean
            Return Me.GetElement().Attribute(name) IsNot Nothing
        End Function

        Protected Function GetAttribute(Of T)(name As String) As T
            Dim value As String = Me.GetElement().Attribute(name).Value
            Select Case True
                Case GetType(T) Is GetType(String)
                    Return DirectCast(Convert.ChangeType(value, GetType(T)), T)
                Case GetType(T) Is GetType(Integer)
                    Return DirectCast(Convert.ChangeType(Integer.Parse(value), GetType(T)), T)
                Case GetType(T) Is GetType(TimeSpan)
                    Return DirectCast(Convert.ChangeType(TimeSpan.FromMinutes(Integer.Parse(value)), GetType(T)), T)
                Case GetType(T) Is GetType(StatusCode)
                    Return DirectCast(Convert.ChangeType([Enum].Parse(GetType(StatusCode), value), GetType(T)), T)
            End Select
        End Function

#End Region

    End Class

End Namespace